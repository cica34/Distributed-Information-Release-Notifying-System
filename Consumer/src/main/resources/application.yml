server:
  port: 8002

spring:
  application:
    name: kafkaConsumer

  redis:
    database: 0
    host: 127.0.0.1
    port: 6379
    password: 123456
    timeout: 1000
    jedis:
      pool:
        max-active: 8
        max-wait: -1
        max-idle: 8
        min-idle: 0

  kafka:
#    bootstrap-servers: 127.0.0.1:9092
    bootstrap-servers: 43.131.12.169:9092,43.131.14.163:9092,43.131.14.163:9094
    consumer: # consumer消费者
      #bootstrap-servers: 192.168.31.222:9092,192.168.31.222:9093,192.168.31.222:9094   #43.131.12.169:9092,43.131.14.163:9092,43.131.14.163:9094
      group-id: article # 默认的消费组ID
      enable-auto-commit: false # 是否自动提交offset
      auto-commit-interval: 100  # 提交offset延时(接收到消息后多久提交offset)

      # earliest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费
      # latest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据
      # none:topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      #      value-deserializer: com.itheima.demo.config.MyDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer




